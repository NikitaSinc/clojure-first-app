{"version":3,"sources":["app.cljs"],"mappings":"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","names":["app/app-state","reagent.core.atom","re_frame.core.reg_event_fx","p__31745","map__31746","cljs.core/--destructure-map","cljs.core.get","db","_","ajax.core/json-response-format","p__31747","p__31748","map__31749","vec__31750","cljs.core.nth","val","ajax.core/json-request-format","p__31753","p__31754","map__31755","vec__31756","p__31759","p__31760","map__31761","vec__31762","re_frame.core.reg_event_db","p__31765","vec__31766","response","cljs.core.assoc","cljs.core.js__GT_clj","p__31769","vec__31770","p__31773","vec__31774","tdb","resp","cljs.core/first","cljs.core.update","cljs.core.conj","p__31777","vec__31778","p__31782","vec__31783","old","cljs.core/vec","p1__31781#","cljs.core.remove","cljs.core._EQ_","p__31786","vec__31787","p__31791","vec__31792","p1__31790#","cljs.core.map","p__31795","vec__31796","re_frame.core.reg_sub","re_frame.core.subscribe","tasks","p1__31799#","cljs.core.sort","cljs.core/deref","p1__31800#","app/new-task-input","value","cljs.core/reset!","app/tasks-grid","new-task","iter__5523__auto__","s__31802","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__31804","cljs.core/chunk-buffer","i__31803","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__31801","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","t","cljs.core/not","re-frame.core/dispatch","app/app","js/app","js/app.root","app/root","js/module$node_modules$react_dom$client.createRoot","js/document.getElementById","app/init","reagent.core.as_element","app/re-render","cljs.core/chunk-first"],"sourcesContent":["(ns app (:require\n                  [\"react-dom/client\" :refer [createRoot]]\n                  [reagent.core :as r]\n                  [reagent.dom :as rd]\n                  [re-frame.core :as rf]\n                  [stylo.core :refer [c]]\n                  [day8.re-frame.http-fx]\n                  [ajax.core :as ajax]\n                  [clojure.string :as s]))\n\n(def app-state (r/atom {:tasks []}))\n\n(rf/reg-event-fx\n  :get-tasks\n  (fn [{db :db} _]\n    {:http-xhrio {:method           :get\n                 :uri               \"http://localhost:8080/tasks/get\"\n                 :timeout           5000\n                 :response-format   (ajax/json-response-format {:keywords? true})\n                 :on-success        [:success-get-tasks]\n                 :on-failure        [:failure-get-tasks]}}))\n\n(rf/reg-event-fx\n  :add-tasks\n  (fn [{db :db} [_ val]]\n    {:http-xhrio {:method           :post\n                  :uri              \"http://localhost:8080/tasks/add\"\n                  :timeout          5000\n                  :params           val\n                  :format           (ajax/json-request-format)\n                  :response-format  (ajax/json-response-format {:keywords? true})\n                  :on-success       [:success-add-tasks]\n                  :on-failure       [:failure-add-tasks]}}))\n\n(rf/reg-event-fx\n  :delete-tasks\n  (fn [{db :db} [_ val]]\n    {:http-xhrio {:method           :post\n                  :uri              (str \"http://localhost:8080/tasks/delete/\" val)\n                  :timeout          5000\n                  :format           (ajax/json-request-format)\n                  :response-format  (ajax/json-response-format {:keywords? true})\n                  :on-success       [:success-delete-tasks]\n                  :on-failure       [:failure-delete-tasks]}}))\n\n(rf/reg-event-fx\n  :update-tasks\n  (fn [{db :db} [_ val]]\n    {:http-xhrio {:method           :post\n                  :uri              (str \"http://localhost:8080/tasks/update/\")\n                  :timeout          5000\n                  :params           val\n                  :format           (ajax/json-request-format)\n                  :response-format  (ajax/json-response-format {:keywords? true})\n                  :on-success       [:success-update-tasks]\n                  :on-failure       [:failure-update-tasks]}}))\n\n\n(rf/reg-event-db\n  :success-get-tasks\n  (fn [db [_ response]]\n    (assoc db :tasks (js->clj response :keywordize-keys true))))\n\n(rf/reg-event-db\n  :failure-get-tasks\n  (fn [db [_ response]]\n    (assoc db :error-message response)))\n\n(rf/reg-event-db\n  :success-add-tasks\n  (fn [db [_ response]]\n    (let [tdb (:tasks db)\n          resp (first (js->clj response))]\n    (update db :tasks (fn [_]\n                        (conj tdb resp))))))\n\n(rf/reg-event-db\n  :failure-add-tasks\n  (fn [db [_ response]]\n    (assoc db :error-message response)))\n\n(rf/reg-event-db\n  :success-delete-tasks\n  (fn [db [_ response]]\n    (let [tdb (:tasks db)\n          resp (js->clj response :keywordize-keys true)]\n    (update db :tasks  (fn [old]\n                        (vec (remove #(= (:tasks/id %) (:tasks/id resp)) old)))))))\n\n(rf/reg-event-db\n  :failure-delete-tasks\n  (fn [db [_ response]]\n    (assoc db :error-message response)))\n\n(rf/reg-event-db\n  :success-update-tasks\n  (fn [db [_ response]]\n    (let [tdb (:tasks db)\n          resp (js->clj response :keywordize-keys true)]\n    (update db :tasks  (fn [old]\n                        (map #(if (= (:tasks/id resp) (:tasks/id %))\n                                resp\n                                %) old))))))\n\n(rf/reg-event-db\n  :failure-update-tasks\n  (fn [db [_ response]]\n    (assoc db :error-message response)))\n\n\n(rf/reg-sub\n  :tasks\n  (fn [db _]\n    (:tasks db)))\n\n(rf/reg-sub\n  :sorted-tasks\n  (fn [_ _]\n    (rf/subscribe [:tasks]))\n  (fn [tasks _]\n    (sort #(false? (:tasks/done %)) tasks)))\n\n(defn new-task-input [value]\n  [:input {:value @value\n           :placeholder \"Type new task here\"\n           :on-change #(reset! value (-> % .-target .-value))}])\n\n(defn tasks-grid []\n  (let [tasks (rf/subscribe [:sorted-tasks])\n        new-task (r/atom \"\")]\n  [:table {:class (c :table [:border 2] [:w 100])}\n   [:thead {:class (c :px-auto)}\n      [:tr {:class (c :table-row)}\n      [:td \"ID\"]\n      [:td \"Description\"]\n      [:td \"Done\"]]]\n   [:tbody {:class (c [:gap 2])}\n    (for [t @tasks]\n         ^{:key (:tasks/id t)}\n     [:tr {:class (c :table-row)}\n      [:td (str (:tasks/id t))]\n      [:td (if (not (:tasks/done t))\n             (str (:tasks/description t))\n             [:s (str (:tasks/description t))])]\n      [:td [:input {:type :checkbox\n                    :checked (:tasks/done t)\n                    :on-change #(rf/dispatch [:update-tasks\n                                              {:id (:tasks/id t)\n                                              :description (:tasks/description t)\n                                               :done (not(:tasks/done t))}])}]]\n      [:td [:button \"Update\"]]\n      [:td [:button {:on-click #(rf/dispatch [:delete-tasks (:tasks/id t)] )} \"Delete\"]]])\n     [:tr {:class (c :table-row)}\n      [:td]\n      [:td [new-task-input new-task]]\n      [:td [:button {:on-click #(rf/dispatch [:add-tasks {:description @new-task}])} \"Add\"]]]]]))\n\n(defn app []\n  [:div.wrapper {:class (c :w-full\n                           [:pl 10]\n                           [:pt 10]\n                           :font-sants)}\n   [:div.content {:class (c :w-auto)}\n    [:h1 {:class (c :text-lg)} \"Tasks\"]\n    [tasks-grid]]])\n\n(defonce root (createRoot (js/document.getElementById \"tasks-app\")))\n\n(defn init []\n  (.render root (r/as-element [app]))\n  (rf/dispatch [:get-tasks]))\n\n(defn ^:dev/after-load re-render\n  []\n  (init))\n"]}