{"version":3,"sources":["app.cljs"],"mappings":"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","names":["app/app-state","reagent.core.atom","app/cljsify","d","cljs.core.js__GT_clj","re-frame.core/reg-fx","p__41140","map__41141","cljs.core/--destructure-map","cljs.core.get","req","method","uri","success","failure","js/window","resp","seq__41142","cljs.core/seq","chunk__41143","count__41144","i__41145","temp__5804__auto__","cljs.core/chunked-seq?","c__5568__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","f","re-frame.core/dispatch","seq__41146","chunk__41147","count__41148","i__41149","s","re_frame.core.reg_event_fx","p__41150","map__41151","db","_","p__41152","p__41153","map__41154","vec__41155","cljs.core.nth","val","ajax.core/json-request-format","ajax.core/json-response-format","p__41158","p__41159","map__41160","vec__41161","p__41164","p__41165","map__41166","vec__41167","re_frame.core.reg_event_db","p__41170","vec__41171","response","cljs.core.println","cljs.core.assoc","p__41174","vec__41175","p__41178","vec__41179","tdb","cljs.core.update","cljs.core.conj","p__41182","vec__41183","p__41187","vec__41188","old","cljs.core/vec","p1__41186#","cljs.core.remove","cljs.core._EQ_","p__41191","vec__41192","p__41196","vec__41197","p1__41195#","cljs.core.map","p__41200","vec__41201","p__41204","vec__41205","id","re_frame.core.reg_sub","re_frame.core.subscribe","tasks","p1__41208#","cljs.core.sort","cljs.core/deref","p1__41209#","app/new-task-input","value","cljs.core/reset!","p1__41210#","app/change-desc-input","app/tasks-grid","ch-desc","new-task","new-description","cljs.core.doall","iter__5523__auto__","s__41212","cljs.core/LazySeq","c__5521__auto__","size__5522__auto__","b__41214","cljs.core/chunk-buffer","i__41213","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__41211","cljs.core/cons","cljs.core/rest","t","cljs.core/not","app/app","js/app","js/app.root","app/root","js/module$node_modules$react_dom$client.createRoot","js/document.getElementById","app/init","reagent.core.as_element","app/re-render"],"sourcesContent":["(ns app (:require\n                  [\"react-dom/client\" :refer [createRoot]]\n                  [reagent.core :as r]\n                  [reagent.dom :as rd]\n                  [re-frame.core :as rf]\n                  [stylo.core :refer [c]]\n                  [day8.re-frame.http-fx]\n                  [ajax.core :as ajax]\n                  [clojure.string :as s]))\n\n(def app-state (r/atom {:tasks [] :change-desc nil}))\n\n(defn cljsify [d]\n  (js->clj d :keywordize-keys true))\n\n(rf/reg-fx\n  :custom-fetch\n  (fn [{:as req, :keys [method uri success failure]}]\n    (-> (.fetch js/window uri)\n        (.then (fn [resp] (if (> (.-status resp) 203)\n                            (doseq [f failure]\n                              (rf/dispatch [f (cljsify resp)]))\n                            (-> (.json resp)\n                                (.then (fn [resp] (doseq [s success]\n                                                    (rf/dispatch [s (cljsify resp)])))))))))))\n\n(rf/reg-event-fx\n  :get-tasks\n  (fn [{db :db} _]\n    {:custom-fetch {:uri \"http://localhost:8080/tasks/get\"\n                    :success [:success-get-tasks]\n                    :failure [:failure-get-tasks]}}))\n\n#_(rf/reg-event-fx\n    :get-tasks\n  (fn [{db :db} _]\n    {:http-xhrio {:method           :get\n                 :uri               \"http://localhost:8080/tasks/get\"\n                 :timeout           5000\n                 :response-format   (ajax/json-response-format {:keywords? true})\n                 :on-success        [:success-get-tasks]\n                 :on-failure        [:failure-get-tasks]}}))\n\n(rf/reg-event-fx\n  :add-tasks\n  (fn [{db :db} [_ val]]\n    {:http-xhrio {:method           :post\n                  :uri              \"http://localhost:8080/tasks/add\"\n                  :timeout          5000\n                  :params           val\n                  :format           (ajax/json-request-format)\n                  :response-format  (ajax/json-response-format {:keywords? true})\n                  :on-success       [:success-add-tasks]\n                  :on-failure       [:failure-add-tasks]}}))\n\n(rf/reg-event-fx\n  :delete-tasks\n  (fn [{db :db} [_ val]]\n    {:http-xhrio {:method           :post\n                  :uri              (str \"http://localhost:8080/tasks/delete/\" val)\n                  :timeout          5000\n                  :format           (ajax/json-request-format)\n                  :response-format  (ajax/json-response-format {:keywords? true})\n                  :on-success       [:success-delete-tasks]\n                  :on-failure       [:failure-delete-tasks]}}))\n\n(rf/reg-event-fx\n  :update-tasks\n  (fn [{db :db} [_ val]]\n    {:http-xhrio {:method           :post\n                  :uri              (str \"http://localhost:8080/tasks/update/\")\n                  :timeout          5000\n                  :params           val\n                  :format           (ajax/json-request-format)\n                  :response-format  (ajax/json-response-format {:keywords? true})\n                  :on-success       [:success-update-tasks]\n                  :on-failure       [:failure-update-tasks]}\n     :fx [[:dispatch [:change-desc-event nil]]]}))\n\n(rf/reg-event-db\n  :success-get-tasks\n  (fn [db [_ response]]\n    (println response)\n    (assoc db :tasks response)))\n\n#_(rf/reg-event-db\n  :success-get-tasks\n  (fn [db [_ response]]\n    (assoc db :tasks (js->clj response :keywordize-keys true))))\n\n(rf/reg-event-db\n  :failure-get-tasks\n  (fn [db [_ response]]\n    (assoc db :error-message response)))\n\n(rf/reg-event-db\n  :success-add-tasks\n  (fn [db [_ response]]\n    (let [tdb (:tasks db)\n          resp (first (js->clj response))]\n    (update db :tasks (fn [_]\n                        (conj tdb resp))))))\n\n(rf/reg-event-db\n  :failure-add-tasks\n  (fn [db [_ response]]\n    (assoc db :error-message response)))\n\n(rf/reg-event-db\n  :success-delete-tasks\n  (fn [db [_ response]]\n    (let [tdb (:tasks db)\n          resp (js->clj response :keywordize-keys true)]\n    (update db :tasks  (fn [old]\n                        (vec (remove #(= (:tasks/id %) (:tasks/id resp)) old)))))))\n\n(rf/reg-event-db\n  :failure-delete-tasks\n  (fn [db [_ response]]\n    (assoc db :error-message response)))\n\n(rf/reg-event-db\n  :success-update-tasks\n  (fn [db [_ response]]\n    (let [tdb (:tasks db)\n          resp (js->clj response :keywordize-keys true)]\n    (update db :tasks  (fn [old]\n                        (map #(if (= (:tasks/id resp) (:tasks/id %))\n                                resp\n                                %) old))))))\n\n(rf/reg-event-db\n  :failure-update-tasks\n  (fn [db [_ response]]\n    (assoc db :error-message response)))\n\n(rf/reg-event-db\n  :change-desc-event\n  (fn [db [_ id]]\n    (assoc db :change-desc id)))\n\n(rf/reg-sub\n  :tasks\n  (fn [db _]\n    (:tasks db)))\n\n(rf/reg-sub\n  :sorted-tasks\n  (fn [_ _]\n    (rf/subscribe [:tasks]))\n  (fn [tasks _]\n    (sort #(false? (:tasks/done %)) tasks)))\n\n(rf/reg-sub\n  :change-desc\n  (fn [db _]\n    (:change-desc db)))\n\n(defn new-task-input [value]\n  [:input {:value @value\n           :placeholder \"Type new task here\"\n           :on-change #(reset! value (-> % .-target .-value))}])\n\n(defn change-desc-input [value]\n   [:input {:value @value\n           :placeholder \"Type new description\"\n           :on-change #(reset! value (-> % .-target .-value))}])\n\n(defn tasks-grid []\n  (let [tasks (rf/subscribe [:sorted-tasks])\n        ch-desc (rf/subscribe [:change-desc])\n        new-task (r/atom \"\")\n        new-description (r/atom \"\")]\n    [:table {:id \"tasks-grid\"\n             :class (c :table [:border 2] [:w 100])}\n     [:thead {:class (c :px-auto)}\n      [:tr {:class (c :table-row)}\n       [:td \"ID\"]\n       [:td \"Description\"]\n       [:td \"Done\"]]]\n     [:tbody {:class (c [:gap 2])}\n      (doall\n        (for [t @tasks]\n          ^{:key (:tasks/id t)}\n          [:tr {:class (c :table-row)}\n           [:td (str (:tasks/id t))]\n           [:td (doall (if (= (:tasks/id t) @ch-desc)\n                         [change-desc-input new-description]\n                         (if (not (:tasks/done t))\n                           (str (:tasks/description t))\n                           [:s (str (:tasks/description t))])))]\n           [:td [:input {:type :checkbox\n                         :checked (:tasks/done t)\n                         :on-change #(rf/dispatch [:update-tasks\n                                                   {:id (:tasks/id t)\n                                                    :description (:tasks/description t)\n                                                    :done (not(:tasks/done t))}])}]]\n           [:td (doall (if (not (= (:tasks/id t) @ch-desc))\n                         [:button {:on-click #(rf/dispatch [:change-desc-event (:tasks/id t)])} \"Change\"]\n                         [:button {:on-click #(rf/dispatch [:update-tasks\n                                                            {:id (:tasks/id t)\n                                                             :description @new-description\n                                                             :done (:tasks/done t)}])} \"Save\"]))]\n           [:td (if (= (:tasks/id t) @ch-desc)\n                  [:button {:on-click #(rf/dispatch [:change-desc-event nil])} \"Discard\"]\n                  [:button {:on-click #(rf/dispatch [:delete-tasks (:tasks/id t)] )} \"Delete\"])]]))\n      [:tr {:class (c :table-row)}\n       [:td]\n       [:td [new-task-input new-task]]\n       [:td [:button {:on-click #(rf/dispatch [:add-tasks {:description @new-task}])} \"Add\"]]]]]))\n\n(defn app []\n  [:div.wrapper {:class (c :w-full\n                           [:pl 10]\n                           [:pt 10]\n                           :font-sants)}\n   [:div.content {:class (c :w-auto)}\n    [:h1 {:class (c :text-lg)} \"Tasks\"]\n    [tasks-grid]]])\n\n(defonce root (createRoot (js/document.getElementById \"tasks-app\")))\n\n(defn init []\n  (.render root (r/as-element [app]))\n  (rf/dispatch [:get-tasks]))\n\n(defn ^:dev/after-load re-render\n  []\n  (init))\n"]}