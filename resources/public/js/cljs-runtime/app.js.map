{"version":3,"sources":["app.cljs"],"mappings":"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","names":["app/app-state","reagent.core.atom","re_frame.core.reg_event_fx","p__34370","map__34371","cljs.core/--destructure-map","cljs.core.get","db","_","ajax.core/json-response-format","p__34372","p__34373","map__34374","vec__34375","cljs.core.nth","val","ajax.core/json-request-format","p__34378","p__34379","map__34380","vec__34381","p__34384","p__34385","map__34386","vec__34387","re_frame.core.reg_event_db","p__34390","vec__34391","response","cljs.core.assoc","cljs.core.js__GT_clj","p__34394","vec__34395","p__34398","vec__34399","tdb","resp","cljs.core/first","cljs.core.update","cljs.core.conj","p__34402","vec__34403","p__34407","vec__34408","old","cljs.core/vec","p1__34406#","cljs.core.remove","cljs.core._EQ_","p__34411","vec__34412","p__34416","vec__34417","p1__34415#","cljs.core.map","p__34420","vec__34421","p__34424","vec__34425","id","re_frame.core.reg_sub","re_frame.core.subscribe","tasks","p1__34428#","cljs.core.sort","cljs.core/deref","p1__34429#","app/new-task-input","value","cljs.core/reset!","p1__34430#","app/change-desc-input","app/tasks-grid","ch-desc","new-task","new-description","cljs.core.doall","iter__5523__auto__","s__34432","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__34434","cljs.core/chunk-buffer","i__34433","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__34431","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","t","cljs.core/not","re-frame.core/dispatch","app/app","js/app","js/app.root","app/root","js/module$node_modules$react_dom$client.createRoot","js/document.getElementById","app/init","reagent.core.as_element","app/re-render","cljs.core/chunk-first"],"sourcesContent":["(ns app (:require\n                  [\"react-dom/client\" :refer [createRoot]]\n                  [reagent.core :as r]\n                  [reagent.dom :as rd]\n                  [re-frame.core :as rf]\n                  [stylo.core :refer [c]]\n                  [day8.re-frame.http-fx]\n                  [ajax.core :as ajax]\n                  [clojure.string :as s]))\n\n(def app-state (r/atom {:tasks [] :change-desc nil}))\n\n(rf/reg-event-fx\n  :get-tasks\n  (fn [{db :db} _]\n    {:http-xhrio {:method           :get\n                 :uri               \"http://localhost:8080/tasks/get\"\n                 :timeout           5000\n                 :response-format   (ajax/json-response-format {:keywords? true})\n                 :on-success        [:success-get-tasks]\n                 :on-failure        [:failure-get-tasks]}}))\n\n(rf/reg-event-fx\n  :add-tasks\n  (fn [{db :db} [_ val]]\n    {:http-xhrio {:method           :post\n                  :uri              \"http://localhost:8080/tasks/add\"\n                  :timeout          5000\n                  :params           val\n                  :format           (ajax/json-request-format)\n                  :response-format  (ajax/json-response-format {:keywords? true})\n                  :on-success       [:success-add-tasks]\n                  :on-failure       [:failure-add-tasks]}}))\n\n(rf/reg-event-fx\n  :delete-tasks\n  (fn [{db :db} [_ val]]\n    {:http-xhrio {:method           :post\n                  :uri              (str \"http://localhost:8080/tasks/delete/\" val)\n                  :timeout          5000\n                  :format           (ajax/json-request-format)\n                  :response-format  (ajax/json-response-format {:keywords? true})\n                  :on-success       [:success-delete-tasks]\n                  :on-failure       [:failure-delete-tasks]}}))\n\n(rf/reg-event-fx\n  :update-tasks\n  (fn [{db :db} [_ val]]\n    {:http-xhrio {:method           :post\n                  :uri              (str \"http://localhost:8080/tasks/update/\")\n                  :timeout          5000\n                  :params           val\n                  :format           (ajax/json-request-format)\n                  :response-format  (ajax/json-response-format {:keywords? true})\n                  :on-success       [:success-update-tasks]\n                  :on-failure       [:failure-update-tasks]}\n     :fx [[:dispatch [:change-desc-event nil]]]}))\n\n\n(rf/reg-event-db\n  :success-get-tasks\n  (fn [db [_ response]]\n    (assoc db :tasks (js->clj response :keywordize-keys true))))\n\n(rf/reg-event-db\n  :failure-get-tasks\n  (fn [db [_ response]]\n    (assoc db :error-message response)))\n\n(rf/reg-event-db\n  :success-add-tasks\n  (fn [db [_ response]]\n    (let [tdb (:tasks db)\n          resp (first (js->clj response))]\n    (update db :tasks (fn [_]\n                        (conj tdb resp))))))\n\n(rf/reg-event-db\n  :failure-add-tasks\n  (fn [db [_ response]]\n    (assoc db :error-message response)))\n\n(rf/reg-event-db\n  :success-delete-tasks\n  (fn [db [_ response]]\n    (let [tdb (:tasks db)\n          resp (js->clj response :keywordize-keys true)]\n    (update db :tasks  (fn [old]\n                        (vec (remove #(= (:tasks/id %) (:tasks/id resp)) old)))))))\n\n(rf/reg-event-db\n  :failure-delete-tasks\n  (fn [db [_ response]]\n    (assoc db :error-message response)))\n\n(rf/reg-event-db\n  :success-update-tasks\n  (fn [db [_ response]]\n    (let [tdb (:tasks db)\n          resp (js->clj response :keywordize-keys true)]\n    (update db :tasks  (fn [old]\n                        (map #(if (= (:tasks/id resp) (:tasks/id %))\n                                resp\n                                %) old))))))\n\n(rf/reg-event-db\n  :failure-update-tasks\n  (fn [db [_ response]]\n    (assoc db :error-message response)))\n\n(rf/reg-event-db\n  :change-desc-event\n  (fn [db [_ id]]\n    (assoc db :change-desc id)))\n\n(rf/reg-sub\n  :tasks\n  (fn [db _]\n    (:tasks db)))\n\n(rf/reg-sub\n  :sorted-tasks\n  (fn [_ _]\n    (rf/subscribe [:tasks]))\n  (fn [tasks _]\n    (sort #(false? (:tasks/done %)) tasks)))\n\n(rf/reg-sub\n  :change-desc\n  (fn [db _]\n    (:change-desc db)))\n\n(defn new-task-input [value]\n  [:input {:value @value\n           :placeholder \"Type new task here\"\n           :on-change #(reset! value (-> % .-target .-value))}])\n\n(defn change-desc-input [value]\n   [:input {:value @value\n           :placeholder \"Type new description\"\n           :on-change #(reset! value (-> % .-target .-value))}])\n\n(defn tasks-grid []\n  (let [tasks (rf/subscribe [:sorted-tasks])\n        ch-desc (rf/subscribe [:change-desc])\n        new-task (r/atom \"\")\n        new-description (r/atom \"\")]\n  [:table {:id \"tasks-grid\"\n           :class (c :table [:border 2] [:w 100])}\n   [:thead {:class (c :px-auto)}\n      [:tr {:class (c :table-row)}\n      [:td \"ID\"]\n      [:td \"Description\"]\n      [:td \"Done\"]\n       ]]\n   [:tbody {:class (c [:gap 2])}\n    (doall (for [t @tasks]\n         ^{:key (:tasks/id t)}\n     [:tr {:class (c :table-row)}\n      [:td (str (:tasks/id t))]\n      [:td (doall (if (= (:tasks/id t) @ch-desc)\n             [change-desc-input new-description]\n             (if (not (:tasks/done t))\n              (str (:tasks/description t))\n              [:s (str (:tasks/description t))])))]\n      [:td [:input {:type :checkbox\n                    :checked (:tasks/done t)\n                    :on-change #(rf/dispatch [:update-tasks\n                                              {:id (:tasks/id t)\n                                               :description (:tasks/description t)\n                                               :done (not(:tasks/done t))}])}]]\n      [:td (doall (if (not (= (:tasks/id t) @ch-desc))\n             [:button {:on-click #(rf/dispatch [:change-desc-event (:tasks/id t)])} \"Change\"]\n             [:button {:on-click #(rf/dispatch [:update-tasks\n                                                {:id (:tasks/id t)\n                                                 :description @new-description\n                                                 :done (:tasks/done t)}])} \"Save\"]))]\n      [:td (if (= (:tasks/id t) @ch-desc)\n             [:button {:on-click #(rf/dispatch [:change-desc-event nil])} \"Discard\"]\n             [:button {:on-click #(rf/dispatch [:delete-tasks (:tasks/id t)] )} \"Delete\"])]]))\n     [:tr {:class (c :table-row)}\n      [:td]\n      [:td [new-task-input new-task]]\n      [:td [:button {:on-click #(rf/dispatch [:add-tasks {:description @new-task}])} \"Add\"]]]]]))\n\n(defn app []\n  [:div.wrapper {:class (c :w-full\n                           [:pl 10]\n                           [:pt 10]\n                           :font-sants)}\n   [:div.content {:class (c :w-auto)}\n    [:h1 {:class (c :text-lg)} \"Tasks\"]\n    [tasks-grid]]])\n\n(defonce root (createRoot (js/document.getElementById \"tasks-app\")))\n\n(defn init []\n  (.render root (r/as-element [app]))\n  (rf/dispatch [:get-tasks]))\n\n(defn ^:dev/after-load re-render\n  []\n  (init))\n"]}